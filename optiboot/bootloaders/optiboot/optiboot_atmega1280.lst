
optiboot_atmega1280.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  0001fe62  000002f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000262  0001fc00  0001fc00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  0001fffe  0001fffe  000002f6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000011  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000309  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d7  00000000  00000000  00000331  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000025c  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000331  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00000e98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c8  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000439  00000000  00000000  000010f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000152d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001fc00 <main>:
#define appstart_vec (0)
#endif // VIRTUAL_BOOT_PARTITION


/* main program starts here */
int main(void) {
   1fc00:	1f 92       	push	r1
   1fc02:	cd b7       	in	r28, 0x3d	; 61
   1fc04:	de b7       	in	r29, 0x3e	; 62
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
   1fc06:	11 24       	eor	r1, r1
   * Pass the reset reason to app.  Also, it appears that an Uno poweron
   * can leave multiple reset flags set; we only want the bootloader to
   * run on an 'external reset only' status
   */
#if !defined(__AVR_ATmega16__)
  ch = MCUSR;
   1fc08:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
   1fc0a:	14 be       	out	0x34, r1	; 52
#else
  ch = MCUCSR;
  MCUCSR = 0;
#endif
  if (ch & (_BV(WDRF) | _BV(BORF) | _BV(PORF)))
   1fc0c:	98 2f       	mov	r25, r24
   1fc0e:	9d 70       	andi	r25, 0x0D	; 13
   1fc10:	09 f0       	breq	.+2      	; 0x1fc14 <main+0x14>
      appStart(ch);
   1fc12:	0b d1       	rcall	.+534    	; 0x1fe2a <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
   1fc14:	85 e0       	ldi	r24, 0x05	; 5
   1fc16:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
   1fc1a:	82 e0       	ldi	r24, 0x02	; 2
   1fc1c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
   1fc20:	88 e1       	ldi	r24, 0x18	; 24
   1fc22:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
   1fc26:	86 e0       	ldi	r24, 0x06	; 6
   1fc28:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
   1fc2c:	80 e1       	ldi	r24, 0x10	; 16
   1fc2e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WATCHDOG_1S);
   1fc32:	8e e0       	ldi	r24, 0x0E	; 14
   1fc34:	e5 d0       	rcall	.+458    	; 0x1fe00 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
   1fc36:	27 9a       	sbi	0x04, 7	; 4
   1fc38:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
   1fc3a:	20 e3       	ldi	r18, 0x30	; 48
   1fc3c:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
   1fc3e:	91 e0       	ldi	r25, 0x01	; 1
    TCNT1 = -(F_CPU/(1024*16));
   1fc40:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
   1fc44:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    TIFR1 = _BV(TOV1);
   1fc48:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
   1fc4a:	b0 9b       	sbis	0x16, 0	; 22
   1fc4c:	fe cf       	rjmp	.-4      	; 0x1fc4a <main+0x4a>
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
   1fc4e:	1f 9a       	sbi	0x03, 7	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fc50:	a8 95       	wdr
   1fc52:	81 50       	subi	r24, 0x01	; 1
  } while (--count);
   1fc54:	a9 f7       	brne	.-22     	; 0x1fc40 <main+0x40>
   1fc56:	61 2c       	mov	r6, r1
   1fc58:	71 2c       	mov	r7, r1
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
   1fc5a:	ff 24       	eor	r15, r15
   1fc5c:	f3 94       	inc	r15
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
   1fc5e:	45 e0       	ldi	r20, 0x05	; 5
   1fc60:	e4 2e       	mov	r14, r20
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
   1fc62:	51 e1       	ldi	r21, 0x11	; 17
   1fc64:	d5 2e       	mov	r13, r21
    ch = getch();
   1fc66:	c0 d0       	rcall	.+384    	; 0x1fde8 <getch>
    if(ch == STK_GET_PARAMETER) {
   1fc68:	81 34       	cpi	r24, 0x41	; 65
   1fc6a:	d1 f4       	brne	.+52     	; 0x1fca0 <main+0xa0>
      unsigned char which = getch();
   1fc6c:	bd d0       	rcall	.+378    	; 0x1fde8 <getch>
      verifySpace();
   1fc6e:	89 83       	std	Y+1, r24	; 0x01
   1fc70:	cd d0       	rcall	.+410    	; 0x1fe0c <verifySpace>
      if (which == STK_SW_MINOR) {
   1fc72:	89 81       	ldd	r24, Y+1	; 0x01
   1fc74:	82 38       	cpi	r24, 0x82	; 130
   1fc76:	11 f4       	brne	.+4      	; 0x1fc7c <main+0x7c>
	  putch(optiboot_version & 0xFF);
   1fc78:	82 e0       	ldi	r24, 0x02	; 2
   1fc7a:	10 c0       	rjmp	.+32     	; 0x1fc9c <main+0x9c>
      } else if (which == STK_SW_MAJOR) {
   1fc7c:	81 38       	cpi	r24, 0x81	; 129
   1fc7e:	69 f4       	brne	.+26     	; 0x1fc9a <main+0x9a>
	  putch(optiboot_version >> 8);
   1fc80:	86 e0       	ldi	r24, 0x06	; 6
   1fc82:	0c c0       	rjmp	.+24     	; 0x1fc9c <main+0x9c>
    else if(ch == STK_READ_PAGE) {
   1fc84:	84 37       	cpi	r24, 0x74	; 116
   1fc86:	09 f4       	brne	.+2      	; 0x1fc8a <main+0x8a>
   1fc88:	7e c0       	rjmp	.+252    	; 0x1fd86 <main+0x186>
    else if(ch == STK_READ_SIGN) {
   1fc8a:	85 37       	cpi	r24, 0x75	; 117
   1fc8c:	09 f0       	breq	.+2      	; 0x1fc90 <main+0x90>
   1fc8e:	9d c0       	rjmp	.+314    	; 0x1fdca <main+0x1ca>
      verifySpace();
   1fc90:	bd d0       	rcall	.+378    	; 0x1fe0c <verifySpace>
      putch(SIGNATURE_0);
   1fc92:	8e e1       	ldi	r24, 0x1E	; 30
   1fc94:	a2 d0       	rcall	.+324    	; 0x1fdda <putch>
      putch(SIGNATURE_1);
   1fc96:	87 e9       	ldi	r24, 0x97	; 151
   1fc98:	a0 d0       	rcall	.+320    	; 0x1fdda <putch>
	putch(0x03);
   1fc9a:	83 e0       	ldi	r24, 0x03	; 3
   1fc9c:	9e d0       	rcall	.+316    	; 0x1fdda <putch>
   1fc9e:	9a c0       	rjmp	.+308    	; 0x1fdd4 <main+0x1d4>
    else if(ch == STK_SET_DEVICE) {
   1fca0:	82 34       	cpi	r24, 0x42	; 66
   1fca2:	11 f4       	brne	.+4      	; 0x1fca8 <main+0xa8>
      getNch(20);
   1fca4:	84 e1       	ldi	r24, 0x14	; 20
   1fca6:	03 c0       	rjmp	.+6      	; 0x1fcae <main+0xae>
    else if(ch == STK_SET_DEVICE_EXT) {
   1fca8:	85 34       	cpi	r24, 0x45	; 69
   1fcaa:	19 f4       	brne	.+6      	; 0x1fcb2 <main+0xb2>
      getNch(5);
   1fcac:	85 e0       	ldi	r24, 0x05	; 5
   1fcae:	b6 d0       	rcall	.+364    	; 0x1fe1c <getNch>
   1fcb0:	91 c0       	rjmp	.+290    	; 0x1fdd4 <main+0x1d4>
    else if(ch == STK_LOAD_ADDRESS) {
   1fcb2:	85 35       	cpi	r24, 0x55	; 85
   1fcb4:	71 f4       	brne	.+28     	; 0x1fcd2 <main+0xd2>
      newAddress = getch();
   1fcb6:	98 d0       	rcall	.+304    	; 0x1fde8 <getch>
   1fcb8:	18 2f       	mov	r17, r24
      newAddress = (newAddress & 0xff) | (getch() << 8);
   1fcba:	96 d0       	rcall	.+300    	; 0x1fde8 <getch>
   1fcbc:	61 2e       	mov	r6, r17
   1fcbe:	71 2c       	mov	r7, r1
   1fcc0:	78 2a       	or	r7, r24
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
   1fcc2:	87 2d       	mov	r24, r7
   1fcc4:	88 1f       	adc	r24, r24
   1fcc6:	88 27       	eor	r24, r24
   1fcc8:	88 1f       	adc	r24, r24
   1fcca:	8b bf       	out	0x3b, r24	; 59
      newAddress += newAddress; // Convert from word address to byte address
   1fccc:	66 0c       	add	r6, r6
   1fcce:	77 1c       	adc	r7, r7
   1fcd0:	80 c0       	rjmp	.+256    	; 0x1fdd2 <main+0x1d2>
    else if(ch == STK_UNIVERSAL) {
   1fcd2:	86 35       	cpi	r24, 0x56	; 86
   1fcd4:	21 f4       	brne	.+8      	; 0x1fcde <main+0xde>
      getNch(4);
   1fcd6:	84 e0       	ldi	r24, 0x04	; 4
   1fcd8:	a1 d0       	rcall	.+322    	; 0x1fe1c <getNch>
      putch(0x00);
   1fcda:	80 e0       	ldi	r24, 0x00	; 0
   1fcdc:	df cf       	rjmp	.-66     	; 0x1fc9c <main+0x9c>
    else if(ch == STK_PROG_PAGE) {
   1fcde:	84 36       	cpi	r24, 0x64	; 100
   1fce0:	89 f6       	brne	.-94     	; 0x1fc84 <main+0x84>
      GETLENGTH(length);
   1fce2:	82 d0       	rcall	.+260    	; 0x1fde8 <getch>
   1fce4:	08 2f       	mov	r16, r24
   1fce6:	10 e0       	ldi	r17, 0x00	; 0
   1fce8:	10 2f       	mov	r17, r16
   1fcea:	00 27       	eor	r16, r16
   1fcec:	7d d0       	rcall	.+250    	; 0x1fde8 <getch>
   1fcee:	08 2b       	or	r16, r24
      desttype = getch();
   1fcf0:	7b d0       	rcall	.+246    	; 0x1fde8 <getch>
   1fcf2:	c8 2e       	mov	r12, r24
      GETLENGTH(length);
   1fcf4:	58 01       	movw	r10, r16
      desttype = getch();
   1fcf6:	81 2c       	mov	r8, r1
   1fcf8:	22 e0       	ldi	r18, 0x02	; 2
   1fcfa:	92 2e       	mov	r9, r18
      do *bufPtr++ = getch();
   1fcfc:	75 d0       	rcall	.+234    	; 0x1fde8 <getch>
   1fcfe:	f4 01       	movw	r30, r8
   1fd00:	81 93       	st	Z+, r24
   1fd02:	4f 01       	movw	r8, r30
      while (--length);
   1fd04:	f1 e0       	ldi	r31, 0x01	; 1
   1fd06:	af 1a       	sub	r10, r31
   1fd08:	b1 08       	sbc	r11, r1
   1fd0a:	c1 f7       	brne	.-16     	; 0x1fcfc <main+0xfc>
      verifySpace();
   1fd0c:	7f d0       	rcall	.+254    	; 0x1fe0c <verifySpace>
    switch (memtype) {
   1fd0e:	85 e4       	ldi	r24, 0x45	; 69
   1fd10:	c8 12       	cpse	r12, r24
   1fd12:	13 c0       	rjmp	.+38     	; 0x1fd3a <main+0x13a>
   1fd14:	48 01       	movw	r8, r16
   1fd16:	ee ef       	ldi	r30, 0xFE	; 254
   1fd18:	9e 1a       	sub	r9, r30
   1fd1a:	53 01       	movw	r10, r6
   1fd1c:	00 e0       	ldi	r16, 0x00	; 0
   1fd1e:	12 e0       	ldi	r17, 0x02	; 2
        while(len--) {
   1fd20:	08 15       	cp	r16, r8
   1fd22:	19 05       	cpc	r17, r9
   1fd24:	09 f4       	brne	.+2      	; 0x1fd28 <main+0x128>
   1fd26:	56 c0       	rjmp	.+172    	; 0x1fdd4 <main+0x1d4>
	    eeprom_write_byte((uint8_t *)(address++), *mybuff++);
   1fd28:	f8 01       	movw	r30, r16
   1fd2a:	61 91       	ld	r22, Z+
   1fd2c:	8f 01       	movw	r16, r30
   1fd2e:	c5 01       	movw	r24, r10
   1fd30:	8a d0       	rcall	.+276    	; 0x1fe46 <__eewr_byte_m1280>
   1fd32:	ff ef       	ldi	r31, 0xFF	; 255
   1fd34:	af 1a       	sub	r10, r31
   1fd36:	bf 0a       	sbc	r11, r31
   1fd38:	f3 cf       	rjmp	.-26     	; 0x1fd20 <main+0x120>
	    __boot_page_erase_short((uint16_t)(void*)address);
   1fd3a:	83 e0       	ldi	r24, 0x03	; 3
   1fd3c:	f3 01       	movw	r30, r6
   1fd3e:	87 bf       	out	0x37, r24	; 55
   1fd40:	e8 95       	spm
	    boot_spm_busy_wait();
   1fd42:	07 b6       	in	r0, 0x37	; 55
   1fd44:	00 fc       	sbrc	r0, 0
   1fd46:	fd cf       	rjmp	.-6      	; 0x1fd42 <main+0x142>
   1fd48:	80 e0       	ldi	r24, 0x00	; 0
   1fd4a:	90 e0       	ldi	r25, 0x00	; 0
   1fd4c:	fc 01       	movw	r30, r24
   1fd4e:	fe 5f       	subi	r31, 0xFE	; 254
		a = *bufPtr++;
   1fd50:	20 81       	ld	r18, Z
   1fd52:	fc 01       	movw	r30, r24
   1fd54:	e6 0d       	add	r30, r6
   1fd56:	f7 1d       	adc	r31, r7
   1fd58:	dc 01       	movw	r26, r24
   1fd5a:	af 5f       	subi	r26, 0xFF	; 255
   1fd5c:	bd 4f       	sbci	r27, 0xFD	; 253
		a |= (*bufPtr++) << 8;
   1fd5e:	4c 91       	ld	r20, X
   1fd60:	30 e0       	ldi	r19, 0x00	; 0
   1fd62:	34 2b       	or	r19, r20
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
   1fd64:	09 01       	movw	r0, r18
   1fd66:	f7 be       	out	0x37, r15	; 55
   1fd68:	e8 95       	spm
   1fd6a:	11 24       	eor	r1, r1
   1fd6c:	02 96       	adiw	r24, 0x02	; 2
	    } while (len -= 2);
   1fd6e:	08 17       	cp	r16, r24
   1fd70:	19 07       	cpc	r17, r25
   1fd72:	61 f7       	brne	.-40     	; 0x1fd4c <main+0x14c>
	    __boot_page_write_short((uint16_t)(void*)address);
   1fd74:	f3 01       	movw	r30, r6
   1fd76:	e7 be       	out	0x37, r14	; 55
   1fd78:	e8 95       	spm
	    boot_spm_busy_wait();
   1fd7a:	07 b6       	in	r0, 0x37	; 55
   1fd7c:	00 fc       	sbrc	r0, 0
   1fd7e:	fd cf       	rjmp	.-6      	; 0x1fd7a <main+0x17a>
	    boot_rww_enable();
   1fd80:	d7 be       	out	0x37, r13	; 55
   1fd82:	e8 95       	spm
   1fd84:	27 c0       	rjmp	.+78     	; 0x1fdd4 <main+0x1d4>
      GETLENGTH(length);
   1fd86:	30 d0       	rcall	.+96     	; 0x1fde8 <getch>
   1fd88:	08 2f       	mov	r16, r24
   1fd8a:	10 e0       	ldi	r17, 0x00	; 0
   1fd8c:	10 2f       	mov	r17, r16
   1fd8e:	00 27       	eor	r16, r16
   1fd90:	2b d0       	rcall	.+86     	; 0x1fde8 <getch>
   1fd92:	08 2b       	or	r16, r24
      desttype = getch();
   1fd94:	29 d0       	rcall	.+82     	; 0x1fde8 <getch>
      verifySpace();
   1fd96:	89 83       	std	Y+1, r24	; 0x01
   1fd98:	39 d0       	rcall	.+114    	; 0x1fe0c <verifySpace>

static inline void read_mem(uint8_t memtype, uint16_t address, pagelen_t length)
{
    uint8_t ch;

    switch (memtype) {
   1fd9a:	89 81       	ldd	r24, Y+1	; 0x01
   1fd9c:	53 01       	movw	r10, r6
   1fd9e:	85 34       	cpi	r24, 0x45	; 69
   1fda0:	61 f4       	brne	.+24     	; 0x1fdba <main+0x1ba>

#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
    case 'E': // EEPROM
	do {
	    putch(eeprom_read_byte((uint8_t *)(address++)));
   1fda2:	c5 01       	movw	r24, r10
   1fda4:	48 d0       	rcall	.+144    	; 0x1fe36 <__eerd_byte_m1280>
   1fda6:	19 d0       	rcall	.+50     	; 0x1fdda <putch>
	} while (--length);
   1fda8:	01 50       	subi	r16, 0x01	; 1
   1fdaa:	11 09       	sbc	r17, r1
   1fdac:	ff ef       	ldi	r31, 0xFF	; 255
   1fdae:	af 1a       	sub	r10, r31
   1fdb0:	bf 0a       	sbc	r11, r31
   1fdb2:	01 15       	cp	r16, r1
   1fdb4:	11 05       	cpc	r17, r1
   1fdb6:	a9 f7       	brne	.-22     	; 0x1fda2 <main+0x1a2>
   1fdb8:	0d c0       	rjmp	.+26     	; 0x1fdd4 <main+0x1d4>
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
   1fdba:	f5 01       	movw	r30, r10
   1fdbc:	87 91       	elpm	r24, Z+
   1fdbe:	5f 01       	movw	r10, r30
   1fdc0:	0c d0       	rcall	.+24     	; 0x1fdda <putch>
	} while (--length);
   1fdc2:	01 50       	subi	r16, 0x01	; 1
   1fdc4:	11 09       	sbc	r17, r1
   1fdc6:	c9 f7       	brne	.-14     	; 0x1fdba <main+0x1ba>
   1fdc8:	05 c0       	rjmp	.+10     	; 0x1fdd4 <main+0x1d4>
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
   1fdca:	81 35       	cpi	r24, 0x51	; 81
   1fdcc:	11 f4       	brne	.+4      	; 0x1fdd2 <main+0x1d2>
      watchdogConfig(WATCHDOG_16MS);
   1fdce:	88 e0       	ldi	r24, 0x08	; 8
   1fdd0:	17 d0       	rcall	.+46     	; 0x1fe00 <watchdogConfig>
      verifySpace();
   1fdd2:	1c d0       	rcall	.+56     	; 0x1fe0c <verifySpace>
    putch(STK_OK);
   1fdd4:	80 e1       	ldi	r24, 0x10	; 16
   1fdd6:	01 d0       	rcall	.+2      	; 0x1fdda <putch>
  }
   1fdd8:	46 cf       	rjmp	.-372    	; 0x1fc66 <main+0x66>

0001fdda <putch>:
  while (!(UART_SRA & _BV(UDRE0)));
   1fdda:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
   1fdde:	95 ff       	sbrs	r25, 5
   1fde0:	fc cf       	rjmp	.-8      	; 0x1fdda <putch>
  UART_UDR = ch;
   1fde2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
   1fde6:	08 95       	ret

0001fde8 <getch>:
  while(!(UART_SRA & _BV(RXC0)))
   1fde8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
   1fdec:	87 ff       	sbrs	r24, 7
   1fdee:	fc cf       	rjmp	.-8      	; 0x1fde8 <getch>
  if (!(UART_SRA & _BV(FE0))) {
   1fdf0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
   1fdf4:	84 fd       	sbrc	r24, 4
   1fdf6:	01 c0       	rjmp	.+2      	; 0x1fdfa <getch+0x12>
  __asm__ __volatile__ (
   1fdf8:	a8 95       	wdr
  ch = UART_UDR;
   1fdfa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
   1fdfe:	08 95       	ret

0001fe00 <watchdogConfig>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fe00:	e0 e6       	ldi	r30, 0x60	; 96
   1fe02:	f0 e0       	ldi	r31, 0x00	; 0
   1fe04:	98 e1       	ldi	r25, 0x18	; 24
   1fe06:	90 83       	st	Z, r25
  WDTCSR = x;
   1fe08:	80 83       	st	Z, r24
   1fe0a:	08 95       	ret

0001fe0c <verifySpace>:
  if (getch() != CRC_EOP) {
   1fe0c:	ed df       	rcall	.-38     	; 0x1fde8 <getch>
   1fe0e:	80 32       	cpi	r24, 0x20	; 32
   1fe10:	19 f0       	breq	.+6      	; 0x1fe18 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
   1fe12:	88 e0       	ldi	r24, 0x08	; 8
   1fe14:	f5 df       	rcall	.-22     	; 0x1fe00 <watchdogConfig>
      ;				      //  a reset and app start.
   1fe16:	ff cf       	rjmp	.-2      	; 0x1fe16 <verifySpace+0xa>
  putch(STK_INSYNC);
   1fe18:	84 e1       	ldi	r24, 0x14	; 20
   1fe1a:	df cf       	rjmp	.-66     	; 0x1fdda <putch>

0001fe1c <getNch>:
void getNch(uint8_t count) {
   1fe1c:	cf 93       	push	r28
   1fe1e:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
   1fe20:	e3 df       	rcall	.-58     	; 0x1fde8 <getch>
   1fe22:	c1 50       	subi	r28, 0x01	; 1
   1fe24:	e9 f7       	brne	.-6      	; 0x1fe20 <getNch+0x4>
}
   1fe26:	cf 91       	pop	r28
  verifySpace();
   1fe28:	f1 cf       	rjmp	.-30     	; 0x1fe0c <verifySpace>

0001fe2a <appStart>:
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
   1fe2a:	28 2e       	mov	r2, r24
  watchdogConfig(WATCHDOG_OFF);
   1fe2c:	80 e0       	ldi	r24, 0x00	; 0
   1fe2e:	e8 df       	rcall	.-48     	; 0x1fe00 <watchdogConfig>
  __asm__ __volatile__ (
   1fe30:	e0 e0       	ldi	r30, 0x00	; 0
   1fe32:	ff 27       	eor	r31, r31
   1fe34:	09 94       	ijmp

0001fe36 <__eerd_byte_m1280>:
   1fe36:	f9 99       	sbic	0x1f, 1	; 31
   1fe38:	fe cf       	rjmp	.-4      	; 0x1fe36 <__eerd_byte_m1280>
   1fe3a:	92 bd       	out	0x22, r25	; 34
   1fe3c:	81 bd       	out	0x21, r24	; 33
   1fe3e:	f8 9a       	sbi	0x1f, 0	; 31
   1fe40:	99 27       	eor	r25, r25
   1fe42:	80 b5       	in	r24, 0x20	; 32
   1fe44:	08 95       	ret

0001fe46 <__eewr_byte_m1280>:
   1fe46:	26 2f       	mov	r18, r22

0001fe48 <__eewr_r18_m1280>:
   1fe48:	f9 99       	sbic	0x1f, 1	; 31
   1fe4a:	fe cf       	rjmp	.-4      	; 0x1fe48 <__eewr_r18_m1280>
   1fe4c:	1f ba       	out	0x1f, r1	; 31
   1fe4e:	92 bd       	out	0x22, r25	; 34
   1fe50:	81 bd       	out	0x21, r24	; 33
   1fe52:	20 bd       	out	0x20, r18	; 32
   1fe54:	0f b6       	in	r0, 0x3f	; 63
   1fe56:	f8 94       	cli
   1fe58:	fa 9a       	sbi	0x1f, 2	; 31
   1fe5a:	f9 9a       	sbi	0x1f, 1	; 31
   1fe5c:	0f be       	out	0x3f, r0	; 63
   1fe5e:	01 96       	adiw	r24, 0x01	; 1
   1fe60:	08 95       	ret
